/**
 * @dev Fixtures
 */
const { loadFixture } = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const { expect } = require("chai");
const { ethers, upgrades } = require("hardhat");

const [
    managerAdmin,
    managerPauser,
    managerUpgrader,
    managerVersioner,
    cmAccountAdmin,
    cmAccountPauser,
    cmAccountUpgrader,
    developerWallet,
    developerWalletAdmin,
    feeAdmin,
    chequeOperator,
    depositor,
    withdrawer,
    otherAccount1,
    otherAccount2,
    otherAccount3,
] = await ethers.getSigner();

const developerFeeBp = 100;

async function deployCMAccountManagerFixture(cmAccountImpl) {
    const CMAccountManager = await ethers.getContractFactory("CMAccountManager");
    const cmAccountManager = await upgrades.deployProxy(
        CMAccountManager,
        [
            managerAdmin.address,
            managerPauser.address,
            managerUpgrader.address,
            managerVersioner.address,
            developerWallet.address,
            developerFeeBp,
        ],
        { kind: "uups" },
    );
    return { cmAccountManager };
}

async function deployCMAccountImplFixture(managerAddress) {
    const CMAccount = await ethers.getContractFactory("CMAccount");
    const cmAccountImpl = await CMAccount.deploy();
    await cmAccountImpl.waitForDeployment();

    return { cmAccountImpl };
}

async function deployCMAccountManagerWithCMAccountImplFixture() {
    const { cmAccountManager } = await loadFixture(deployCMAccountManagerFixture);
    const { cmAccountImpl } = await loadFixture(deployCMAccountImplFixture);

    await cmAccountManager.grantRole(await cmAccountManager.VERSIONER_ROLE(), managerVersioner.address);
    await cmAccountManager.connect(managerVersioner).setAccountImplementation(cmAccountImpl.address);

    return { cmAccountManager, cmAccountImpl };
}

async function deployAndConfigureAllFixture() {
    const { cmAccountManager, cmAccountImpl } = await loadFixture(deployCMAccountManagerWithCMAccountImplFixture);

    cmAccountManager.grantRole(await cmAccountManager.DEVELOPER_WALLET_ADMIN(), developerWalletAdmin.address);
    cmAccountManager.grantRole(await cmAccountManager.FEE_ADMIN(), feeAdmin.address);

    const tx = await cmAccountManager.createCMAccount(
        cmAccountAdmin.address,
        cmAccountPauser.address,
        cmAccountUpgrader.address,
        true, // anyOneCanDeposit
    );

    const receipt = await tx.wait();

    // Parse event to get the CMAccount address (this is the UUPS proxy address)
    const event = receipt.logs.find((log) => {
        try {
            return cmAccountManager.interface.parseLog(log).name === "CMAccountCreated";
        } catch (e) {
            return false;
        }
    });

    const parsedEvent = cmAccountManager.interface.parseLog(event);
    const cmAccountAddress = parsedEvent.args.account;

    // Get the CMAccount instance at the address
    const cmAccount = await ethers.getContractAt("CMAccount", cmAccountAddress);

    return { cmAccountManager, cmAccount };
}
